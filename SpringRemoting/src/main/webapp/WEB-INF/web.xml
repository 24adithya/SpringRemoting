<web-app xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0" metadata-complete="true">
	<display-name>Spring HTTP Invoker Sample</display-name>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/app-context-annotation-data-transactions-hibernate-home-xml.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- Difference between dispatcher servlet and http request handler servler. In short, a simpler version is the http one -->
	<!-- https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/HttpRequestHandlerServlet.html -->
	
	<!-- Approach 1 - using dispatcher servlet and mvc pattern  - works. Refer remoting-servlet.xml. 
	     Note: It will refer the service in the remoting-servlet.xml -->
	<servlet>
		<servlet-name>remoting</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>remoting</servlet-name>
		<url-pattern>/remoting/*</url-pattern>
	</servlet-mapping>
	
	<!-- Approach 1 - using simple http handler approach and HttpInvokerServiceExporter (where bean name matches with the exporter defined as the servlet name) - works. Refer xml in contextConfigLocation -->
	<!-- <servlet>
		<servlet-name>serviceExporter</servlet-name>
		<servlet-class>
			org.springframework.web.context.support.HttpRequestHandlerServlet
		</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>serviceExporter</servlet-name>
		<url-pattern>/remoting/SpringService</url-pattern>
	</servlet-mapping> -->
</web-app>